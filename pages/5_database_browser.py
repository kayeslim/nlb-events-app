import streamlit as st
from utils.rag_database import EventsRAGDatabase
from utils.security import check_password, get_openai_key
import pandas as pd

def main():
    if not check_password():
        return
    
    # Check if OpenAI API key is available
    if not get_openai_key():
        st.error("❌ OpenAI API key not configured. Please go back to the main page and set up your API key.")
        return
    
    st.title("🔍 Database Browser")
    
    st.markdown("""
    Explore and search through all events in your NLB Events database. This tool allows you to:
    - Browse all processed events with full details
    - Search events by title, description, or content
    - Filter by category, audience, or other criteria
    - View enhanced content generated by AI
    - Export filtered results
    """)
    
    # Initialize RAG database
    try:
        rag_db = EventsRAGDatabase()
        
        # Check if database has events
        stats = rag_db.get_database_stats()
        if stats["total_events"] == 0:
            st.warning("⚠️ No events found in database.")
            
            # Provide helpful guidance
            st.info("""
            **To get started with the Database Browser:**
            
            1. **Go to '1 Use Case 1'** to process your NLB events data
            2. **Choose how many events** to process (5-100 recommended)
            3. **Wait for processing** to complete (this may take a few minutes)
            4. **Return here** to browse and search your processed events
            
            The system will automatically enhance your events with AI-generated summaries, 
            categorize them, and make them searchable.
            """)
            
            # Show quick action buttons
            col1, col2 = st.columns(2)
            with col1:
                st.info("**📊 Quick Start:**")
                st.write("• Process 20 events for testing")
                st.write("• Use sample data if no JSONL file")
                st.write("• Takes ~2-3 minutes to complete")
            
            with col2:
                st.success("**🎯 What You'll Get:**")
                st.write("• AI-enhanced event summaries")
                st.write("• Categorized events by type")
                st.write("• Searchable database")
                st.write("• Export capabilities")
            
            return
        else:
            st.success(f"📊 Database contains {stats['total_events']} events")
            
            # Show database statistics
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Events", stats["total_events"])
            with col2:
                st.metric("Unique Events", stats["unique_events"])
            with col3:
                st.metric("Duplicates", stats["duplicate_events"])
            
    except Exception as e:
        st.error(f"❌ Database connection failed: {str(e)}")
        st.info("💡 This might be due to a corrupted database file. Try running '1 Use Case 1' to rebuild the database.")
        return
    
    # Get all events from database
    try:
        all_events = rag_db.get_all_events()
        
        if not all_events:
            st.warning("No events found in the database.")
            return
    except Exception as e:
        st.error(f"❌ Failed to retrieve events from database: {str(e)}")
        st.info("💡 Try running '1 Use Case 1' to rebuild the database.")
        return
    
    # Search and filter options
    st.subheader("🔍 Search & Filter Options")
    
    col1, col2 = st.columns(2)
    
    with col1:
        search_term = st.text_input(
            "🔍 Search events by title or description:",
            placeholder="Enter keywords to search...",
            help="Search through event titles, descriptions, and AI-enhanced content"
        )
    
    with col2:
        category_filter = st.selectbox(
            "📂 Filter by category:",
            ["All Categories"] + list(set([e.get('event_category', 'Unknown') for e in all_events if e.get('event_category')]))
        )
    
    # Additional filters
    col3, col4 = st.columns(2)
    
    with col3:
        audience_filter = st.selectbox(
            "👥 Filter by audience:",
            ["All Audiences"] + list(set([e.get('target_audience', 'Unknown') for e in all_events if e.get('target_audience')]))
        )
    
    with col4:
        source_filter = st.selectbox(
            "📄 Filter by source:",
            ["All Sources"] + list(set([e.get('source', 'Unknown') for e in all_events if e.get('source')]))
        )
    
    # Filter events based on search and filters
    filtered_events = all_events
    
    if search_term:
        search_lower = search_term.lower()
        filtered_events = [
            e for e in filtered_events 
            if search_lower in e.get('title', '').lower() 
            or search_lower in e.get('description', '').lower()
            or search_lower in e.get('concise_summary', '').lower()
            or search_lower in e.get('long_summary', '').lower()
        ]
    
    if category_filter != "All Categories":
        filtered_events = [
            e for e in filtered_events 
            if e.get('event_category') == category_filter
        ]
    
    if audience_filter != "All Audiences":
        filtered_events = [
            e for e in filtered_events 
            if e.get('target_audience') == audience_filter
        ]
    
    if source_filter != "All Sources":
        filtered_events = [
            e for e in filtered_events 
            if e.get('source') == source_filter
        ]
    
    # Display filtered results
    st.subheader(f"📋 Results ({len(filtered_events)} events found)")
    
    if filtered_events:
        # Pagination
        events_per_page = 5
        total_pages = (len(filtered_events) + events_per_page - 1) // events_per_page
        
        if total_pages > 1:
            col1, col2 = st.columns([1, 3])
            with col1:
                page = st.selectbox(
                    f"📄 Page:",
                    range(1, total_pages + 1),
                    format_func=lambda x: f"{x}/{total_pages}"
                )
            with col2:
                st.write(f"Showing page {page} of {total_pages}")
        else:
            page = 1
        
        start_idx = (page - 1) * events_per_page
        end_idx = start_idx + events_per_page
        page_events = filtered_events[start_idx:end_idx]
        
        # Display events
        for i, event in enumerate(page_events):
            with st.expander(f"🎪 {event['title']}", expanded=(i == 0)):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**📅 Date:** {event.get('date', 'Not specified')}")
                    st.write(f"**🕐 Time:** {event.get('time', 'Not specified')}")
                    st.write(f"**📍 Location:** {event.get('location', 'Not specified')}")
                    st.write(f"**🔗 Source:** {event.get('source', 'Not specified')}")
                    
                    if event.get('description'):
                        st.write("**📝 Description:**")
                        st.write(event['description'])
                    
                    if event.get('concise_summary'):
                        st.write("**🔍 Concise Summary:**")
                        st.write(event['concise_summary'])
                    
                    if event.get('long_summary'):
                        st.write("**📖 Long Summary:**")
                        st.write(event['long_summary'])
                
                with col2:
                    st.write(f"**🎯 Target Audience:** {event.get('target_audience', 'Not classified')}")
                    st.write(f"**📂 Category:** {event.get('event_category', 'Not classified')}")
                    st.write(f"**🆔 Event ID:** {event.get('event_id', 'Not specified')}")
                    
                    if event.get('url'):
                        st.link_button("🌐 View Original", event['url'])
                
                # Q&A Section
                if event.get('qna_pairs'):
                    st.write("**❓ Frequently Asked Questions:**")
                    for qa in event['qna_pairs']:
                        st.write(f"**Q:** {qa.get('question', 'N/A')}")
                        st.write(f"**A:** {qa.get('answer', 'N/A')}")
                        st.write("")
        
        # Export functionality
        st.subheader("📤 Export Options")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("📊 Export to CSV", type="secondary"):
                # Prepare data for CSV export
                export_data = []
                for event in filtered_events:
                    export_data.append({
                        "Title": event.get('title', ''),
                        "Date": event.get('date', ''),
                        "Time": event.get('time', ''),
                        "Location": event.get('location', ''),
                        "Category": event.get('event_category', ''),
                        "Audience": event.get('target_audience', ''),
                        "Source": event.get('source', ''),
                        "Event ID": event.get('event_id', ''),
                        "URL": event.get('url', ''),
                        "Concise Summary": event.get('concise_summary', ''),
                        "Description": event.get('description', '')
                    })
                
                df = pd.DataFrame(export_data)
                csv = df.to_csv(index=False)
                st.download_button(
                    label="📥 Download CSV",
                    data=csv,
                    file_name=f"nlb_events_export_{len(filtered_events)}_events.csv",
                    mime="text/csv"
                )
        
        with col2:
            if st.button("📋 Export Summary", type="secondary"):
                # Create a summary report
                summary_data = {
                    "Total Events": len(filtered_events),
                    "Categories": len(set([e.get('event_category', 'Unknown') for e in filtered_events])),
                    "Audiences": len(set([e.get('target_audience', 'Unknown') for e in filtered_events])),
                    "Sources": len(set([e.get('source', 'Unknown') for e in filtered_events])),
                    "Date Range": f"{min([e.get('date', '') for e in filtered_events if e.get('date')], default='N/A')} to {max([e.get('date', '') for e in filtered_events if e.get('date')], default='N/A')}"
                }
                
                summary_df = pd.DataFrame(list(summary_data.items()), columns=["Metric", "Value"])
                summary_csv = summary_df.to_csv(index=False)
                st.download_button(
                    label="📥 Download Summary",
                    data=summary_csv,
                    file_name="nlb_events_summary.csv",
                    mime="text/csv"
                )
        
        # Show duplicate information if any
        if stats["duplicate_events"] > 0:
            st.subheader("⚠️ Duplicate Events")
            st.warning(f"Found {stats['duplicate_events']} duplicate events in database")
            
            # Show duplicate event IDs
            duplicate_ids = rag_db.get_duplicate_event_ids()
            if duplicate_ids:
                with st.expander("🔍 View Duplicate Event IDs"):
                    st.write("The following event IDs appear multiple times:")
                    for dup_id in duplicate_ids:
                        st.code(dup_id)
    
    else:
        st.warning("No events found matching your search criteria.")
        
        # Suggestions
        st.subheader("💡 Try these suggestions:")
        st.write("• Use broader search terms")
        st.write("• Remove some filters")
        st.write("• Try example searches like:")
        st.write("  - 'family activities'")
        st.write("  - 'digital skills'")
        st.write("  - 'career development'")
        st.write("  - 'workshop'")
        st.write("  - 'talk'")

if __name__ == "__main__":
    main()
